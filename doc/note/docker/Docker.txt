
Docker
================

Likely "docker" commands require "sudo".


## Build image, container and run it

Example IMG:  "your_img_name:latest"
Example CNTNR: "your_container"

  cd /some/empty/directory
  curl -sSL "http://example.com/path/to.Dockerfile" | docker build . -f- -t IMG
  docker create --name CNTNR -v "$PWD:/work" IMG
  docker start CNTNR


## Basic Usage

  docker build -f DOCKERFILE -t IMG WORKDIR
  docker run --rm -ti IMG sh
  docker run --rm -i IMG sh --help
  docker create --name CNTNR -v "$PWD:/work" IMG
  docker start CNTNR
  docker exec -ti CNTNR sh
  docker exec -ti CNTNR sh -c 'echo foo bar'



## Manage Volumes

List:
  docker volume ls

List LARGE volumes:
  sudo sh -c 'cd /var/lib/docker/volumes && du -hs *' | sort -hrk1 | head

Show owner:
  docker ps -a --filter volume=VOLUME

Browse image:
  docker image ls | grep base
  docker run --rm -ti --entrypoint /bin/bash IMAGE -s

Browse volume:
  docker run --rm -ti -v=VOLUME:/mnt/myvolume IMAGE bash

Browse dead container:
  //TODO:  docker exec --entrypoint /bin/bash CONTAINER args for bash
  //WRONG: docker run --entrypoint /bin/bash CONTAINER args for bash

Export/import/share image:
  docker save PATH/NAME:VERSION > IMAGE.tar
  podman load < IMAGE.tar

Side-Mount tcpdump into container where it does not exist
  docker run --rm -ti --network container:"${CNTNR_TO_DUMP:?}" -v "/tmp/foo:/work" "${IMG_WITH_TCPDUMP_EG_BASEIMG:?}" bash


## Import system from custom directory structure (NOT TESTED)

  tar cf my.tar bin etc home lib* media mnt opt root sbin srv usr var
  docker import my.tar localhost/example:0.0.0


## Inspect failing docker-build

See "https://stackoverflow.com/a/26222636/4415884"

  docker run --rm -ti 42424242 sh

HINT: Use the line which looks like:
"---> 42424242"
and NOT the one like:
"---> Running in 42424242"


## Publish custom images to artifactory

To allow deletion: Tag MUST contain "latest" or "SNAPSHOT". Eg:
- "docker.example.com/USERNAME/<imagename>:latest"

  docker build -t my_image:0.0.0-SNAPSHOT .



## X11 app within container using host display

sudo docker create --name "${CNTNR:?}" -e DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix:ro "${IMG:?}"



  && `# Wiedermal kurz die (PaISA) Welt retten... ` \
  && cd /tmp/theEmptyDir \
  && sudo podman build -t localhost/murks:0.0.0 . -f- <<EOF_3etoij &&
FROM docker.tools.post.ch/paisa/r-service-base:03.06.42.00
USER 0:0
RUN true \
  && microdnf install -y tcpdump \
  && true
EOF_3etoij
true \

--cap-add=NET_ADMIN --cap-add=NET_RAW

  && sudo podman run --rm -ti -v"$PWD:/work:z" --cap-add=NET_ADMIN --net isa-docker localhost/murks:0.0.0 sh -c 'true \
       && cd /work \
       && timeout --foreground 5 tcpdump -ni eth0 -C 50M -W 999 -w "'$(cat /etc/hostname)'-$(date -u +%Y%m%d-%H%M%SZ).pcap" "not port 42" \
       && true' \

