
Git Version Control
===================


## Scattered Shallow Clone

How to clone minimally required commits to have a working repo. VERY handy if
we just need to diff two refs from a GIANT repo where we do not have a local
copy of.

  && `# Basic setup ` \
  && `# PREPARE: Make sure you're in an EMPTY workdir ` \
  && git init \
  && git checkout --orphan empty \
  && git commit --allow-empty -m "Empty commit where our HEAD can stay to reduce unwanted disk IO" \
  && git tag empty HEAD \
  && currBr="$(git branch --show-current)" \
  && git checkout --detach \
  && git branch -D "${currBr:?}" \

  && `# Seek what we wanna download ` \
  && git remote add origin ssh://example.com/repo.git \
  && git ls-remote origin | grep whatever \

  && `# Fetch only EXACTLY the branches we want (for example using previous ` \
  && `# output to decide): ` \
  && branchName=the_branch \
  && git fetch origin --depth=1 refs/heads/"${branchName:?}"
  && git branch "${branchName:?}" FETCH_HEAD \

  && `# Usually tags are of special interest in such a clone (note how we ` \
  && `# specify it twice with colon in between): ` \
  && theTag=v1.2.3 \
  && git fetch origin --depth=1 "refs/tags/${theTag:?}:refs/tags/${theTag:?}" \



## Push shallow clone to empty/bare/new remote repo

  remote$  git config receive.shallowUpdate true
  local$   git push the-grafted-thingy
  remote$  git config receive.shallowUpdate false

  HINT: Can push only ONE branch at a time.


## Cut-off history for self-contained source tarballs.

  && WORKDIR=../tmp \
  && selfRemote="file://${PWD:?}/.git" \
  && shaToCpy="$(git log -n1 --format=format:%H)" \
  && mkdir "${WORKDIR:?}" \
  && cd "${WORKDIR:?}" \
  && git init \
  && git fetch --depth=1 "${selfRemote:?}" "${shaToCpy:?}" \
  && git branch master "${shaToCpy:?}" \
  && git log --all --decorate \
  && printf '\n\nTODO: To fill worktree, do:\n  git checkout master\n\n' \



## Commit worktree to a new orphan branch

  && git checkout --orphan tmp-6o6uq7oKwd0o24iW \
  && git commit -m "TODO: Use   git --amend   to edit this message" \
  && git checkout --detach \
  && git branch -d tmp-6o6uq7oKwd0o24iW \
  && printf \\n \
  && git log --decorate \



## History digging for specific file

  git log --follow -- path/to/file



## History search for file contents

Commit message contains:  git log --grep foo

  git log -S foo               File contents "foo" (literal) num occur has changed:
  git log --pickaxe-regex foo  File contents "foo" (regex) num occur has changed:
  git log -G foo               Diff contains "foo" (regex):

For "-G" add "--patch" to get diff in place of ref.

[src](https://stackoverflow.com/a/1340245/4415884)



## Auto-destroy code-format

  See "../spotless/".



## Reduce local disk usage

Source: "https://gitbetter.substack.com/p/how-to-clean-up-the-git-repo-and"

  git remote prune origin
  git repack
  git prune-packed
  git gc --aggressive

Sometimes also helpful. WARN reflog will be useless after that. Pass -n to see
what gets deleted:
  git prune




## Fix mouse scrolling diff in SOME terminals

[core]
    pager = less -R -+X




## How to push to multiple remotes in one go:

[remote "all"]
	pushurl = user@ONE.example.com:foo/bar.git
	pushurl = user@TWO.example.com:foo/bar.git

git push all --dry-run --all



## Auto-fetch branches AND tags

[remote "upstream"]
	fetch = +refs/heads/*:refs/remotes/upstream/*
	fetch = +refs/tags/*:refs/tags/*



## Fetch multiple remotes (but NOT all!) at once

git fetch --multiple origin upstream




## Prevent accidental push by branch name to remote

Setup a "pre-push" hook.



## Recover accidentally lost remote branches

  `# HINT: this may take a while`
  git fsck --full --no-reflogs | grep commit



## fatal: transport 'file' not allowed

Looks as this got disable due to a CVE. WARN: only use this (insecure)
w√ºrgaround if you know what you're doing:

  -c "protocol.file.allow=always"




## Refs

  [push shallow](https://stackoverflow.com/a/35030063/4415884)


