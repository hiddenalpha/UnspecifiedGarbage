
Qemu
================

## Qemu Setup

  apt install qemu-system-aarch64 qemu-efi-aarch64


## Manage Images

### Create new image
  qemu-img create -f qcow2 disk.qcow2 16G

### Create new overlay image
  qemu-img create -o backing_file=base.qcow2,backing_fmt=qcow2 -f qcow2 disk.qcow2

### Convert qcow2 to raw
  qemu-img convert -f qcow2 -O raw foo.qcow2 foo.img

### Convert raw to qcow2
  qemu-img convert -f raw -O qcow2 foo.img foo.qcow2

### Create Standalone image based on snapshot image
  qemu-img convert -O qcow2 derived.qcow2 standalone.qcow2

## Shrink img

Normal systems:
  qemu-img convert -O qcow2 input.qcow2 output.qcow2

Windoof:
  sdelete -z C:
  qemu-img convert -O qcow2 input.qcow output.qcow2


## Example Params (Usage: CopyPaste, then delege what is not needed)
qemu-system-x86_64 \
    -accel kvm:whpx:hax:tcg -m size=4G -smp cores=$(nproc) \
    -monitor stdio \
    `# Drives & Boot.` \
    -boot order=dc \
    -cdrom "path/to/cd.iso" \
    -hda "$(dirname "$(realpath "$0")")/hda.qcow2" \
    `# Isolated Network plus host port/cmd reachable from guest` \
    -netdev 'user,id=n1,ipv6=off,restrict=y,guestfwd=guestfwd=tcp:10.0.2.9:80-cmd:ncat 127.0.0.1 80' \
    -device e1000,netdev=n1 \
    `# 10.0.2.x network with host redirect` \
    -netdev user,id=n0,ipv6=off,hostfwd=tcp:127.0.0.1:${SSH_PORT:-2222}-:22 \
    -device e1000,netdev=n0 \
    `# socket mcast shared network adapter` \
    -netdev socket,id=n1,ipv6=off,mcast=230.0.0.1:1234 \
    -device e1000,netdev=n1 \
    `# Fix broken host systems` \
    -L "${QEMU_HOME:?}/Bios" -bios "${QEMU_HOME:?}/Bios/bios-256k.bin" \
    `# Fix broken guest systems` \
    -device usb-ehci,id=usb,bus=pci.0,addr=0x4 -device usb-tablet \
    `# Choose ONE of those for graphic output` \
    -nographic \
    -display sdl,grab-mod=rctrl \
    -display gtk,show-menubar=on \
    -display vnc=127.0.0.1:0,to=99 `#HINT: 0 is port 5900` \
    ;

### Example manual adapter setup (inside VM) for socket mcast network:
true \
  && ADDR=192.168.42.101/24 \
  && DEV=ens4 \
  && SUDO=sudo \
  && $SUDO ip a add dev "${DEV:?}" "${ADDR:?}" \
  && $SUDO ip link set "${DEV:?}" up \
  && true


## amd64

  # Choose whichever fits the need
  && HDAIMG="-hda path/to/maindisk.qcow2" \
  && MACHINE="-m size=4G -smp cores=2" \
  && BIOSDIR="path/to/Bios"
  && BIOSFILE="${BIOSDIR:?}/bios-256k.bin" \
  && FIXMOUSEALIGN="-device usb-ehci,id=usb,bus=pci.0,addr=0x4 -device usb-tablet" \
  && NETWORK="-net nic -net user" \
  && NETWORK="-device e1000,netdev=n0 -netdev user,id=n0,hostfwd=tcp:127.0.0.1:2222-:22" \
  && HOSTSPECIFICOPTS="--enable-kvm" \
  && HOSTSPECIFICOPTS="-L ${BIOSDIR:?} -bios ${BIOSFILE:?}" \

Start with installation disk

  && CDROM="-cdrom path/to/installer.iso" \
  && qemu-system-x86_64 ${HOSTSPECIFICOPTS:?} ${MACHINE:?} -boot order=dc ${CDROM} ${HDAIMG:?} ${NETWORK:?} ${FIXMOUSEALIGN:?} \

Regular boot

  && qemu-system-x86_64 ${HOSTSPECIFICOPTS:?} ${MACHINE:?} -boot order=c ${HDAIMG:?} ${NETWORK:?} ${FIXMOUSEALIGN:?} \


## aarch64 (not working yet)

  #apt install -y --no-install-recommends qemu-uefi-aarch64
  curl -sSLO https://github.com/dhruvvyas90/qemu-rpi-kernel/blob/master/kernel-qemu-5.10.63-bullseye
  curl -sSLO https://github.com/dhruvvyas90/qemu-rpi-kernel/blob/master/versatile-pb-bullseye-5.10.63.dtb
  curl -sSLO https://github.com/dhruvvyas90/qemu-rpi-kernel/blob/master/native-emulation/dtbs/bcm2711-rpi-4-b.dtb
  curl -sSLO https://github.com/dhruvvyas90/qemu-rpi-kernel/blob/master/kernel-qemu-5.4.51-buster
  curl -sSLO https://github.com/dhruvvyas90/qemu-rpi-kernel/blob/master/versatile-pb-buster-5.4.51.dtb
  curl -sSLO https://downloads.raspberrypi.org/raspios_lite_arm64/images/raspios_lite_arm64-2023-05-03/2023-05-03-raspios-bullseye-arm64-lite.img.xz
  xz -d 2023-05-03-raspios-bullseye-arm64-lite.img.xz
  echo p | /sbin/fdisk 2023-05-03-raspios-bullseye-arm64-lite.img | egrep 'Linux$' | sed -E 's:^\S+\s+([0-9]+) .*$:\nmount -o offset=$(expr \1 \\* 512) ./2023-05-03-raspios-bullseye-arm64-lite.img /mnt/foo:'
  qemu-img convert -f raw -O qcow2 2023-05-03-raspios-bullseye-arm64-lite.img raspbian-bullseye-lite.qcow2
  qemu-img resize raspbian-bullseye-lite.qcow2 16G
  mv raspbian-bullseye-lite.qcow2 hda.qcow2

  qemu-system-aarch64 \
    -m 256 -cpu arm1176 \
    -M versatilepb \
    -no-reboot \
    -serial stdio \
    -net nic -net user \
    -drive file=2023-05-03-raspios-bullseye-arm64-lite.img,format=raw \
    -boot 'dtb=versatile-pb-bullseye-5.10.63.dtb,kernel=kernel-qemu-5.10.63-bullseye,kernel_args=root=/dev/vda2 panic=1' \

  qemu-system-aarch64 \
    -dtb ./bcm2711-rpi-4-b.dtb \
    -m 256 -cpu arm1176 -M versatilepb \
    -kernel kernel-qemu-5.10.63-bullseye -append "root=/dev/sda2 rootfstype=ext4 rw" \
    -serial stdio \
    -drive file=2023-05-03-raspios-bullseye-arm64-lite.img,format=raw \
    -net nic -net user \
    -no-reboot \

  qemu-system-arm \
    -M versatilepb \
    -cpu arm1176 -m 256 \
    -drive "file=2023-05-03-raspios-bullseye-arm64-lite.img,if=none,index=0,media=disk,format=raw,id=disk0" \
    -device "virtio-blk-pci,drive=disk0,disable-modern=on,disable-legacy=off" \
    -net "user,hostfwd=tcp::5022-:2222" \
    -dtb "./versatile-pb-buster-5.4.51.dtb" \
    -kernel "./kernel-qemu-5.4.51-buster" -append 'root=/dev/vda2 panic=1' \
    -no-reboot


## Shared host directory via CIFS/SMB

  true `# SMB server debian` \
  && hostpath=/path/to/host/dir \
  && sharename=work \
  && apt install --no-install-recommends -y samba
  && printf '[%s]\npath = %s\npublic = no\nwriteable = yes\nguest ok = yes\nforce user = andreas\n' "${sharename:?}" "${hostpath:?}" | $SUDO tee -a /etc/samba/smb.conf >/dev/null \
  && $SUDO /etc/init.d/smbd restart \
  && true

TODO: SMB server windoof
DoesNotWork: "https://serverfault.com/questions/442664/virtualization-linux-kvm-qemu-host-windows-vm-guest-how-to-access-data-drive#comment479177_442678"

true `# SMB client debian` \
  && hostUsername=yourHostUser \
  && smbServer=10.0.2.2 \
  && sharename=work \
  && mountpoint=/mnt/${sharename:?} \
  && guestUid=$(id -u) \
  && guestGid=$(id -g) \
  && true \
  && $SUDO mkdir -p "${mountpoint:?}" \
  && $SUDO apt install --no-install-recommends -y cifs-utils psmisc \
  && $SUDO mount -t cifs -o username=${hostUsername:?},uid=${guestUid:?},gid=${guestGid:?} "//${smbServer:?}/${sharename:?}" "${mountpoint:?}" \
  && true

### Add those in "/etc/fstab" to setup mount automatically at boot:
### HINT:  mkdir /home/user/build
  //10.0.2.2/sharename  /mnt/sharename  cifs  password=,uid=1000,gid=1000,user  0  0
  /home/user/build  /mnt/sharename/build  none  bind  0  0

List smb shares (eg debugging)
  smbclient -NL //10.0.2.2


## Shared host directory via NFS

For debian HOST install 'nfs-kernel-system', then:
  vim /etc/exports
  Example: "/path/to/share 127.0.0.1(rw,no_subtree_check,insecure)"
  exportfs -a; /etc/init.d/nfs-kernel-server restart

For windoof HOST install WinNFSd, then:
  WinNFSd.exe -addr 127.0.0.1 C:\path\to\share /path/to/share

In GUEST to access it do:
  $SUDO apt install -y --no-install-recommends nfs-common
  apk add rpcbind && /etc/init.d/rpcbind start
  mkdir /mnt/host
  $SUDO mount -t nfs -o vers=3 10.0.2.2:/path/to/share /mnt/host

Keep build result inside vm:
  mkdir /tmp/build /mnt/host/build
  mount --bind /tmp/build /mnt/host/build


## USB pass-through

NOTE: Couldn't yet test any of those commands.

### By physical port
  -usb -device usb-host,hostbus=1,hostport=2

### By physical port via hub
  -usb -device usb-host,hostbus=1,hostport=2.3

### By device
  -usb -device usb-host,vendorid=123,productid=456


## Alpine PostInstall

  true \
  && apk add openssh-server \
  && rc-update add sshd \
  && sed -i -E 's;^# *(PermitRootLogin).+$;\1 yes;' /etc/ssh/sshd_config \
  && sed -i -E 's;^# *(http://dl-cdn.alpinelinux.org/alpine/v[^/]+/community)$;\1;' /etc/apk/repositories \
  && mkdir /home/user && chown 1000:1000 /home/user && chmod 755 /home/user \
  && printf 'user:x:1000:1000:user:/home/user:/bin/ash\n' >> /etc/passwd \
  && printf 'user:x:1000:user\n' >> /etc/group \
  && printf 'user:12345\n' | chpasswd \
  && true


## Debian PostInstall

TODO: move this to a better place. Eg: debian/setup.txt or whatever.

  true \
  && http_proxy= \
  && https_proxy= \
  && no_proxy=127.0.0.1,10.0.2.* \
  && SUDO= \
  && true \
  && if [ -n "$http_proxy" ]; then true \
    && (echo "Acquire::http::proxy \"${http_proxy}\";"
        echo "Acquire::https::proxy \"${https_proxy}\";"
       ) | $SUDO tee /etc/apt/apt.conf.d/80proxy >/dev/null \
      ;fi \
  && $SUDO apt update \
  && $SUDO apt install -y --no-install-recommends vim openssh-server net-tools curl \
  && $SUDO sed -i -E 's;^GRUB_TIMEOUT=5$;GRUB_TIMEOUT=1;' /etc/default/grub \
  && $SUDO update-grub \
  && true


## Qemu-Monitor in combo with VNC

  --monitor stdio
  --monitor telnet:127.0.0.1:55555,server,nowait


## Sources

- [apt via proxy](https://computingforgeeks.com/how-to-set-system-proxy-on-debian-linux/?expand_article=1)
- [Qemu ssh from host](https://wiki.qemu.org/Documentation/Networking)
- [shared host dir](https://superuser.com/a/628381/1123359)
- [NFS server for windoof](https://github.com/winnfsd/winnfsd)
- [NFS server for debian](https://vitux.com/debian_nfs_server/)
- [USB pass-through](https://unix.stackexchange.com/a/452946/292722)
- [qemu monitor via telnet](https://unix.stackexchange.com/a/426951/292722)
- [qemu monitor via stdio](https://unix.stackexchange.com/a/57835/292722)
- [qemu raspberry pi TODO](https://blog.agchapman.com/using-qemu-to-emulate-a-raspberry-pi/)
- [connect VM networks](https://qemu.weilnetz.de/doc/6.0/system/invocation.html#sec-005finvocation)

