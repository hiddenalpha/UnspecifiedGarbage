
Manage vDisk images
===================


## Create new image

  qemu-img create -f qcow2 disk.qcow2 16G


## Create new overlay image

  qemu-img create -b base.qcow2 -F qcow2 -f qcow2 disk.qcow2


## Convert qcow2 to raw

  qemu-img convert -f qcow2 -O raw foo.qcow2 foo.img


## Convert raw to qcow2

  qemu-img convert -f raw -O qcow2 foo.img foo.qcow2


## Create Standalone image based on snapshot image

  qemu-img convert -O qcow2 derived.qcow2 standalone.qcow2


## Convert to based from standalone

  qemu-img create -f qcow2 -b old.qcow2 new.qcow2
  qemu-img rebase -b base.qcow2 new.qcow2


## Shrink/compact img

HINT: In case of based images, need rebase afterwards because convert
      makes them standalone.

Normal systems:
  `# TODO try "fstrim -av" instead zerofill. `
  sudo sh -c 'sudo -u user dd if=/dev/zero of=/tmp/deleteme bs=32M; rm /tmp/deleteme ; poweroff'
  qemu-img convert -O qcow2 -S 1M input.qcow2 output.qcow2

Windoof:
  Win -> "Disk Cleanup" -> "Clean System (Admin)" -> "More" -> "Prog+Features" -> uninst bloat.
  Win -> "Disk Cleanup" -> "Clean System (Admin)" -> Tick many -> Hit "OK".
  Defrag (maybe onboard tools are enough?)
  sdelete -z C:
  qemu-img convert -O qcow2 input.qcow output.qcow2
  qemu-img rebase -b base.qcow2 output.qcow2


## Step-By-Step to setup a machine package

  - Create base VM.
  - Setup
  - sudo vim /etc/hostname /etc/hosts
  - set PS1
  - fix proxyPort
  - sudo apt clean
  - rm -rf ~/.bash_history ~/.viminfo
  - sudo rm -rf /tmp/* /var/tmp/*
  - zerofill, sparsify
  - md5sum, tar, md5sum
  - test
  - compress


## Shrink snapshot layer (TODO what is this for?)

  qemu-img convert -O qcow2 snapLayer.qcow2 tmpFullClone.qcow2
  qemu-img create -f qcow2 -b tmpFullClone.qcow2 diff.qcow2
  qemu-img rebase -b base.qcow2 tmpDiff.qcow2
  mv tmpDiff.qcow2 snapLayer.qcow2


## Resize/Shrink disk

  THIS FU@@ shit is broken as hell!

  && oldQcow2=old.qcow2 \
  && newQcow2=new.qcow2 \
  && tmpRaw=tmp.raw \
  && newDiskSz=$((40*1024*1024*1024)) \
  && tmpFsSize=32G \
  && SUDO=sudo \
  && qemu-img convert -f qcow2 -O raw ${oldQcow2:?} ${tmpRaw:?} \
  && printf 'p\n' | /sbin/fdisk ${tmpRaw:?} \
  && $SUDO losetup -o ${partitionOff1:?} -f ${tmpRaw:?} \
  && $SUDO losetup -a \
  && $SUDO e2fsck -f "${loopDev1:?}" \
  && $SUDO resize2fs "${loopDev1:?}" "${tmpFsSize:?}" \
  && $SUDO losetup -d ${loopDev1:?} \
  && truncate -s ${newDiskSz:?} ${tmpRaw:?} \
  && TODO_GrrrReCreateCompletePartitionTblAgainToFixSillySizeMismatch \
  && `# /sbin/fdisk "${tmpRaw:?}" ` \
  && $SUDO losetup -o ${partitionOff2:?} -f ${tmpRaw:?} \
  && $SUDO losetup -a \
  && $SUDO e2fsck -f "${loopDev2:?}" \
  && $SUDO resize2fs "${loopDev2:?}" `#NO sz arg, to grow fully` \
  && $SUDO losetup -d ${loopDev2:?} \
  && qemu-img convert -f raw -O qcow2 ${tmpRaw:?} ${newQcow2:?} \
  && `# cleanup` \
  && rm "${tmpRaw:?}" \


## Resize/Enlarge disk (RHEL edition Grrr....)

  qemu-img info my.disk
  qemu-img resize my.disk 32G
  $SUDO fdisk -l
  $SUDO lvs   (or lvdisplay for more details)
  $SUDO lvextend -r --extents +100%FREE /dev/mapper/fedora-root


## Create common base for two diverged VMs.

  (TODO: test and vote "https://unix.stackexchange.com/a/657073/292722")
  (I have some doubt with this. See other self-made alternative below)
  VM1=one.qcow2
  VM2=two.qcow2
  NEWBASE=newbase.qcow2
  mv ${VM1:?} ${NEWBASE:?}
  qemu-img rebase -b ${NEWBASE:?} ${VM2:?}
  qemu-img create -b ${NEWBASE:?} ${VM1:?}
  qemu-img rebase -b ${NEWBASE:?} ${VM2:?}


## Create common base for two diverged VMs.

  (TODO: Verify)
  && VM1=one.qcow2 \
  && VM2=two.qcow2 \
  && BASE=base.qcow2 \
  && TMP1=tmp1.qcow2 \
  && qemu-img convert -O qcow2 "${VM1:?}" "${TMP1:?}" \
  && qemu-img rebase -b "${TMP1:?}" "${VM2:?}" \
  && mv "${TMP1:?}" "${BASE:?}" \
  && qemu-img rebase -u -b "${BASE:?}" "${VM2:?}" \
  && qemu-img create -f qcow2 -b "${BASE:?}" "${VM1:?}" \


## Inspect qcow2 by host mounting it

  $SUDO modprobe nbd
  $SUDO qemu-nbd -c /dev/nbd__ /path/to/my.qcow2
  echo 'p' | $SUDO fdisk /dev/nbd__
  $SUDO mount -o ro /dev/nbd__p__ /mnt/q
  $SUDO umount /mnt/q  `# cleanup`
  $SUDO qemu-nbd -d /dev/nbd__  `# cleanup`
  $SUDO rmmod nbd  `# cleanup`


