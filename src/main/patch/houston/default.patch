
  Custom houston patch to have a "usable" service at all.

  Patch based on "develop" aka
  "125344e940ebc090183bad7fc096938289f15e3f" from "2024-01-16".


diff --git a/pom.xml b/pom.xml
index 0ed4f7f3..b44c5693 100644
--- a/pom.xml
+++ b/pom.xml
@@ -73,7 +73,7 @@
         <skip.copy-dependencies>false</skip.copy-dependencies>
 
         <!-- spotless -->
-        <source.format.apply.phase>compile</source.format.apply.phase>
+        <source.format.apply.phase>none</source.format.apply.phase>
 
         <!-- JavaMelody -->
         <jetty.version>9.4.43.v20210629</jetty.version>
@@ -301,4 +301,25 @@
             </properties>
         </profile>
     </profiles>
+    <build>
+     <plugins>
+         <plugin>
+             <groupId>com.diffplug.spotless</groupId>
+             <artifactId>spotless-maven-plugin</artifactId>
+             <executions>
+                 <execution>
+                     <id>spotless-apply</id>
+                     <phase>none</phase>
+                 </execution>
+                 <execution>
+                     <id>spotless-check</id>
+                     <phase>none</phase>
+                 </execution>
+             </executions>
+             <configuration>
+                 <skip>true</skip>
+             </configuration>
+         </plugin>
+     </plugins>
+    </build>
 </project>
diff --git a/houston-process/pom.xml b/houston-process/pom.xml
index 374dcb97..3c24937c 100644
--- a/houston-process/pom.xml
+++ b/houston-process/pom.xml
@@ -25,6 +25,26 @@
     </properties>

     <dependencies>
+        <dependency>                              <!-- TODO: Remove -->
+          <groupId>org.slf4j</groupId>            <!-- TODO: Remove -->
+          <artifactId>slf4j-api</artifactId>      <!-- TODO: Remove -->
+          <version>2.0.1</version>                <!-- TODO: Remove -->
+        </dependency>                             <!-- TODO: Remove -->
+        <dependency>                              <!-- TODO: Remove -->
+          <groupId>org.slf4j</groupId>            <!-- TODO: Remove -->
+          <artifactId>slf4j-simple</artifactId>   <!-- TODO: Remove -->
+          <version>2.0.1</version>                <!-- TODO: Remove -->
+        </dependency>                             <!-- TODO: Remove -->
+        <dependency>                              <!-- TODO: Remove -->
+          <groupId>org.slf4j</groupId>            <!-- TODO: Remove -->
+          <artifactId>jcl-over-slf4j</artifactId> <!-- TODO: Remove -->
+          <version>2.0.1</version>                <!-- TODO: Remove -->
+        </dependency>                             <!-- TODO: Remove -->
+        <dependency>                              <!-- TODO: Remove -->
+          <groupId>org.slf4j</groupId>            <!-- TODO: Remove -->
+          <artifactId>jul-to-slf4j</artifactId>   <!-- TODO: Remove -->
+          <version>2.0.1</version>                <!-- TODO: Remove -->
+        </dependency>                             <!-- TODO: Remove -->
         <!-- project -->
         <dependency>
             <groupId>ch.post.it.paisa.houston</groupId>
diff --git a/houston-process/src/main/java/ch/post/it/paisa/houston/process/main/Deployer.java b/houston-process/src/main/java/ch/post/it/paisa/houston/process/main/Deployer.java
index 432efb01..d1729fe9 100644
--- a/houston-process/src/main/java/ch/post/it/paisa/houston/process/main/Deployer.java
+++ b/houston-process/src/main/java/ch/post/it/paisa/houston/process/main/Deployer.java
@@ -68,6 +68,9 @@ public class Deployer {
   private static final Logger LOGGER = LoggerFactory.getLogger(Deployer.class);
 
   public static void main(String[] args) throws Exception {
+    boolean isAssertIsEnabled = false;
+    assert isAssertIsEnabled = true;
+    if (!isAssertIsEnabled) throw new UnsupportedOperationException("Enable assertions to fix this problem -> https://stackoverflow.com/a/68893479/4415884");
     setStartupProperties();
     Props.prepare();
 
@@ -378,7 +378,7 @@ public class Deployer {
                 // All other queues (typically to backend services) with a slow-down pattern after
                 // failed delivery
                 qc.add(
-                    new QueueConfiguration().withPattern(".*").withRetryIntervals(standardDelays));
+                    new QueueConfiguration().withPattern(".*").withRetryIntervals(5/*TODO revert*/));
                 LOGGER.info(
                     "Redisques redis-client will created with MaxPoolSize: {}, MaxPoolWaiting: {}, MaxWaitingHandlers: {}",
                     Props.getMaxRedisConnectionPoolSize4RedisQues(),
diff --git a/houston-process/src/main/java/org/apache/logging/slf4j/Log4jLogger.java b/houston-process/src/main/java/org/apache/logging/slf4j/Log4jLogger.java
new file mode 100644
index 00000000..aa3aa2e0
--- /dev/null
+++ b/houston-process/src/main/java/org/apache/logging/slf4j/Log4jLogger.java
@@ -0,0 +1,98 @@
+package org.apache.logging.slf4j;
+
+import org.apache.logging.log4j.spi.ExtendedLogger;
+import org.slf4j.Marker;
+import org.slf4j.event.Level;
+import org.slf4j.spi.LocationAwareLogger;
+import org.slf4j.spi.LoggingEventBuilder;
+
+import java.io.Serializable;
+
+
+/** <p>FU** this fu***** damn sh** code that still tries to use log4j, no matter
+ * how strong we tell it NOT to use it!</p>
+ * <p>This class only exists to prevent services from starting if IDEA still did miss
+ * the dependency changes in pom and still tries to use the wrong logger impl.</p> */
+public class Log4jLogger implements LocationAwareLogger, Serializable {
+
+    private final org.slf4j.Logger log;
+
+    Log4jLogger(final Log4jMarkerFactory markerFactory, final ExtendedLogger logger, final String name) {
+        this.log = new org.slf4j.simple.SimpleLoggerFactory().getLogger(name);
+    }
+
+    @Override public void log(Marker marker, String s, int i, String s1, Object[] objects, Throwable throwable) {
+        throw new UnsupportedOperationException(/*TODO*/"Not impl yet");
+    }
+
+    @Override public String getName() { return log.getName(); }
+    @Override public LoggingEventBuilder makeLoggingEventBuilder(Level level) { return log.makeLoggingEventBuilder(level); }
+    @Override public LoggingEventBuilder atLevel(Level level) { return log.atLevel(level); }
+    @Override public boolean isEnabledForLevel(Level level) { return log.isEnabledForLevel(level); }
+    @Override public boolean isTraceEnabled() { return log.isTraceEnabled(); }
+    @Override public void trace(String s) { log.trace(s); }
+    @Override public void trace(String s, Object o) { log.trace(s, o); }
+    @Override public void trace(String s, Object o, Object o1) { log.trace(s, o, o1); }
+    @Override public void trace(String s, Object... objects) { log.trace(s, objects); }
+    @Override public void trace(String s, Throwable throwable) { log.trace(s, throwable); }
+    @Override public boolean isTraceEnabled(Marker marker) { return log.isTraceEnabled(marker); }
+    @Override public LoggingEventBuilder atTrace() { return log.atTrace(); }
+    @Override public void trace(Marker marker, String s) { log.trace(marker, s); }
+    @Override public void trace(Marker marker, String s, Object o) { log.trace(marker, s, o); }
+    @Override public void trace(Marker marker, String s, Object o, Object o1) { log.trace(marker, s, o, o1); }
+    @Override public void trace(Marker marker, String s, Object... objects) { log.trace(marker, s, objects); }
+    @Override public void trace(Marker marker, String s, Throwable throwable) { log.trace(marker, s, throwable); }
+    @Override public boolean isDebugEnabled() { return log.isDebugEnabled(); }
+    @Override public void debug(String s) { log.debug(s); }
+    @Override public void debug(String s, Object o) { log.debug(s, o); }
+    @Override public void debug(String s, Object o, Object o1) { log.debug(s, o, o1); }
+    @Override public void debug(String s, Object... objects) { log.debug(s, objects); }
+    @Override public void debug(String s, Throwable throwable) { log.debug(s, throwable); }
+    @Override public boolean isDebugEnabled(Marker marker) { return log.isDebugEnabled(marker); }
+    @Override public void debug(Marker marker, String s) { log.debug(marker, s); }
+    @Override public void debug(Marker marker, String s, Object o) { log.debug(marker, s, o); }
+    @Override public void debug(Marker marker, String s, Object o, Object o1) { log.debug(marker, s, o, o1); }
+    @Override public void debug(Marker marker, String s, Object... objects) { log.debug(marker, s, objects); }
+    @Override public void debug(Marker marker, String s, Throwable throwable) { log.debug(marker, s, throwable); }
+    @Override public LoggingEventBuilder atDebug() { return log.atDebug(); }
+    @Override public boolean isInfoEnabled() { return log.isInfoEnabled(); }
+    @Override public void info(String s) { log.info(s); }
+    @Override public void info(String s, Object o) { log.info(s, o); }
+    @Override public void info(String s, Object o, Object o1) { log.info(s, o, o1); }
+    @Override public void info(String s, Object... objects) { log.info(s, objects); }
+    @Override public void info(String s, Throwable throwable) { log.info(s, throwable); }
+    @Override public boolean isInfoEnabled(Marker marker) { return log.isInfoEnabled(marker); }
+    @Override public void info(Marker marker, String s) { log.info(marker, s); }
+    @Override public void info(Marker marker, String s, Object o) { log.info(marker, s, o); }
+    @Override public void info(Marker marker, String s, Object o, Object o1) { log.info(marker, s, o, o1); }
+    @Override public void info(Marker marker, String s, Object... objects) { log.info(marker, s, objects); }
+    @Override public void info(Marker marker, String s, Throwable throwable) { log.info(marker, s, throwable); }
+    @Override public LoggingEventBuilder atInfo() { return log.atInfo(); }
+    @Override public boolean isWarnEnabled() { return log.isWarnEnabled(); }
+    @Override public void warn(String s) { log.warn(s); }
+    @Override public void warn(String s, Object o) { log.warn(s, o); }
+    @Override public void warn(String s, Object... objects) { log.warn(s, objects); }
+    @Override public void warn(String s, Object o, Object o1) { log.warn(s, o, o1); }
+    @Override public void warn(String s, Throwable throwable) { log.warn(s, throwable); }
+    @Override public boolean isWarnEnabled(Marker marker) { return log.isWarnEnabled(marker); }
+    @Override public void warn(Marker marker, String s) { log.warn(marker, s); }
+    @Override public void warn(Marker marker, String s, Object o) { log.warn(marker, s, o); }
+    @Override public void warn(Marker marker, String s, Object o, Object o1) { log.warn(marker, s, o, o1); }
+    @Override public void warn(Marker marker, String s, Object... objects) { log.warn(marker, s, objects); }
+    @Override public void warn(Marker marker, String s, Throwable throwable) { log.warn(marker, s, throwable); }
+    @Override public LoggingEventBuilder atWarn() { return log.atWarn(); }
+    @Override public boolean isErrorEnabled() { return log.isErrorEnabled(); }
+    @Override public void error(String s) { log.error(s); }
+    @Override public void error(String s, Object o) { log.error(s, o); }
+    @Override public void error(String s, Object o, Object o1) { log.error(s, o, o1); }
+    @Override public void error(String s, Object... objects) { log.error(s, objects); }
+    @Override public void error(String s, Throwable throwable) { log.error(s, throwable); }
+    @Override public boolean isErrorEnabled(Marker marker) { return log.isErrorEnabled(marker); }
+    @Override public void error(Marker marker, String s) { log.error(marker, s); }
+    @Override public void error(Marker marker, String s, Object o) { log.error(marker, s, o); }
+    @Override public void error(Marker marker, String s, Object o, Object o1) { log.error(marker, s, o, o1); }
+    @Override public void error(Marker marker, String s, Object... objects) { log.error(marker, s, objects); }
+    @Override public void error(Marker marker, String s, Throwable throwable) { log.error(marker, s, throwable); }
+    @Override public LoggingEventBuilder atError() { return log.atError(); }
+
+}
