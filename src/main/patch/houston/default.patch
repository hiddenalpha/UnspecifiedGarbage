
  Custom houston patch to have a "usable" service at all.

  Patch based on "develop" aka
  "497a9477c9e2100130f9a29ec130c1131220c935" from "2024-04-22".


--- a/pom.xml
+++ b/pom.xml
@@ -73,7 +73,7 @@
         <skip.copy-dependencies>false</skip.copy-dependencies>
 
         <!-- spotless -->
-        <source.format.apply.phase>compile</source.format.apply.phase>
+        <source.format.apply.phase>none</source.format.apply.phase>
 
         <!-- JavaMelody -->
         <jetty.version>9.4.43.v20210629</jetty.version>


--- a/pom.xml
+++ b/pom.xml
@@ -301,4 +301,25 @@
             </properties>
         </profile>
     </profiles>
+    <build>
+     <plugins>
+         <plugin>
+             <groupId>com.diffplug.spotless</groupId>
+             <artifactId>spotless-maven-plugin</artifactId>
+             <executions>
+                 <execution>
+                     <id>spotless-apply</id>
+                     <phase>none</phase>
+                 </execution>
+                 <execution>
+                     <id>spotless-check</id>
+                     <phase>none</phase>
+                 </execution>
+             </executions>
+             <configuration>
+                 <skip>true</skip>
+             </configuration>
+         </plugin>
+     </plugins>
+    </build>
 </project>


--- a/houston-process/pom.xml
+++ b/houston-process/pom.xml
@@ -27,3 +27,23 @@
     <dependencies>
+        <dependency>                              <!-- TODO: Remove -->
+          <groupId>org.slf4j</groupId>            <!-- TODO: Remove -->
+          <artifactId>slf4j-api</artifactId>      <!-- TODO: Remove -->
+          <version>2.0.1</version>                <!-- TODO: Remove -->
+        </dependency>                             <!-- TODO: Remove -->
+        <dependency>                              <!-- TODO: Remove -->
+          <groupId>org.slf4j</groupId>            <!-- TODO: Remove -->
+          <artifactId>slf4j-simple</artifactId>   <!-- TODO: Remove -->
+          <version>2.0.1</version>                <!-- TODO: Remove -->
+        </dependency>                             <!-- TODO: Remove -->
+        <dependency>                              <!-- TODO: Remove -->
+          <groupId>org.slf4j</groupId>            <!-- TODO: Remove -->
+          <artifactId>jcl-over-slf4j</artifactId> <!-- TODO: Remove -->
+          <version>2.0.1</version>                <!-- TODO: Remove -->
+        </dependency>                             <!-- TODO: Remove -->
+        <dependency>                              <!-- TODO: Remove -->
+          <groupId>org.slf4j</groupId>            <!-- TODO: Remove -->
+          <artifactId>jul-to-slf4j</artifactId>   <!-- TODO: Remove -->
+          <version>2.0.1</version>                <!-- TODO: Remove -->
+        </dependency>                             <!-- TODO: Remove -->
         <!-- project -->
         <dependency>


--- a/houston-process/pom.xml
+++ b/houston-process/pom.xml
@@ -212,6 +232,2 @@
         </dependency>
-        <dependency>
-            <groupId>org.apache.logging.log4j</groupId>
-            <artifactId>log4j-slf4j2-impl</artifactId>
-        </dependency>
         <dependency>


--- a/houston-process/src/main/java/ch/post/it/paisa/houston/process/main/Deployer.java
+++ b/houston-process/src/main/java/ch/post/it/paisa/houston/process/main/Deployer.java
@@ -98,6 +98,9 @@ public class Deployer {
   private static final Logger LOGGER = LoggerFactory.getLogger(Deployer.class);
 
   public static void main(String[] args) throws Exception {
+    boolean isAssertIsEnabled = false;
+    assert isAssertIsEnabled = true;
+    if (!isAssertIsEnabled) throw new UnsupportedOperationException("Enable assertions to fix this problem -> https://stackoverflow.com/a/68893479/4415884");
     throwIfLoggerAmbiguous();
 
     configureObjectMapper();


--- a/houston-process/src/main/java/ch/post/it/paisa/houston/process/main/Deployer.java
+++ b/houston-process/src/main/java/ch/post/it/paisa/houston/process/main/Deployer.java
@@ -471,7 +477,7 @@ public class Deployer {
                 // All other queues (typically to backend services) with a slow-down pattern after
                 // failed delivery
                 qc.add(
-                    new QueueConfiguration().withPattern(".*").withRetryIntervals(standardDelays));
+                    new QueueConfiguration().withPattern(".*").withRetryIntervals(5/*TODO revert*/));
                 LOGGER.info(
                     "Redisques redis-client will created with MaxPoolSize: {}, MaxPoolWaiting: {}, MaxWaitingHandlers: {}",
                     Props.getMaxRedisConnectionPoolSize4RedisQues(),


